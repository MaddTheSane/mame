/*** TMS34010: Portable TMS34010 emulator ***********************************

	Copyright (C) Alex Pasadyn/Zsolt Vasvari 1998
	 originally based on code by Aaron Giles

	Public include file
*****************************************************************************/

#ifndef _TMS34010_H
#define _TMS34010_H

/* TMS34010 Registers */
typedef struct
{
	unsigned int op;
	unsigned int pc;
	unsigned int st;        /* Only here so we can display it in the debug window */
	unsigned int nflag;
	unsigned int cflag;
	unsigned int notzflag;  /* So we can just do an assignment to set it */
	unsigned int vflag;
	unsigned int pflag;
	unsigned int ieflag;
	unsigned int fe0flag;
	unsigned int fe1flag;
	unsigned int fw[2];
	unsigned int fw_inc[2];  /* Same as fw[], except when fw = 0, fw_inc = 32 */
	int Aregs[16];
	int Bregs[16];
	unsigned int IOregs[32];
	void (*F0_write) (unsigned int bitaddr, unsigned int data);
	void (*F1_write) (unsigned int bitaddr, unsigned int data);
	int (*F0_read) (unsigned int bitaddr);
	int (*F1_read) (unsigned int bitaddr);
    int (*pixel_write)(unsigned int address, unsigned int value);
    int (*pixel_read)(unsigned int address);
	int transparency;
	int window_checking;
	int (*raster_op)(int newpix, int oldpix);
	unsigned int lastpixaddr;
	unsigned int lastpixword;
	int lastpixwordchanged;
	int xytolshiftcount1;
	int xytolshiftcount2;
	unsigned short *shiftreg;
	void (*to_shiftreg)(unsigned int address, unsigned short* shiftreg);
    void (*from_shiftreg)(unsigned int address, unsigned short* shiftreg);
} TMS34010_Regs;

/* Interrupt Types that can be generated by outside sources */
#define TMS34010_INT_NONE    0x0000
#define TMS34010_INT1        0x0002    /* External Interrupt 1 */
#define TMS34010_INT2        0x0004    /* External Interrupt 2 */

/* PUBLIC FUNCTIONS */
unsigned TMS34010_GetPC(void);
void TMS34010_SetRegs(TMS34010_Regs *Regs);
void TMS34010_GetRegs(TMS34010_Regs *Regs);
void TMS34010_Reset(void);
int  TMS34010_Execute(int cycles);
void TMS34010_Cause_Interrupt(int type);
void TMS34010_Clear_Pending_Interrupts(void);

void TMS34010_State_Save(int cpunum, void *f);
void TMS34010_State_Load(int cpunum, void *f);

void TMS34010_HSTADRL_w (int offset, int data);
void TMS34010_HSTADRH_w (int offset, int data);
void TMS34010_HSTDATA_w (int offset, int data);
int  TMS34010_HSTDATA_r (int offset);
void TMS34010_HSTCTLH_w (int offset, int data);

/* Sets functions to read/write shift register */
void TMS34010_set_shiftreg_functions(int cpu,
									 void (*to_shiftreg  )(unsigned int, unsigned short*),
									 void (*from_shiftreg)(unsigned int, unsigned short*));

/* Writes to the 34010 io */
void TMS34010_io_register_w(int offset, int data);

/* Reads from the 34010 io */
int TMS34010_io_register_r(int offset);

/* Checks whether the display is inhibited */
int TMS34010_io_display_blanked(int cpu);

int TMS34010_get_DPYSTRT(int cpu);

/* PUBLIC GLOBALS */
extern int TMS34010_ICount;


/* Use this macro in the memory definitions to specify bit-based addresses */
#define TOBYTE(bitaddr) ((unsigned int) (bitaddr)>>3)


#endif /* _TMS34010_H */
